#! /bin/bash

function usage {
  echo "Usage: $0 [flags...] <tests...>|all"
  echo 
  echo "Run <tests> from the libc++ and libcu++ test suites."
  echo "If no tests or \"all\" is specified, all tests are run."
  echo
  echo "-h, -help, --help               : Print this message."
  echo "--dry-run                       : Show what commands would be invoked;"
  echo "                                : don't actually execute anything."
  echo "--libcxx-build-path <dir>       : Use libc++ configuration generated by"
  echo "                                : by CMake from <dir>."
  echo "--libcudacxx-build-path <dir>   : Use libc++ configuration generated by"
  echo "                                : by CMake from <dir>."
  echo "--skip-base-tests-build         : Do not build (or run) any tests."
  echo "                                : Overrides \${LIBCUDACXX_SKIP_BASE_TESTS_BUILD}."
  echo "--skip-tests-runs               : Build tests but do not run them."
  echo "                                : Overrides \${LIBCUDACXX_SKIP_TESTS_RUN}."
  echo "--skip-libcxx-tests             : Do not build (or run) any libc++ tests."
  echo "                                : Overrides \${LIBCUDACXX_SKIP_LIBCXX_TESTS}."
  echo "--skip-libcudacxx-tests         : Do not build (or run) any libcu++ tests."
  echo "                                : Overrides \${LIBCUDACXX_SKIP_LIBCUDACXX_TESTS}."
  echo "--log-libcxx-results <file>     : Log libc++ test results to <file> in addition"
  echo "                                : to stdout (default: libcxx_lit.log)."
  echo "--log-libcudacxx-results <file> : Log libcu++ test results to <file> in addition"
  echo "                                : to stdout (default: libcudacxx_lit.log)."
  echo
  echo "\${LIBCUDACXX_SKIP_BASE_TESTS_BUILD} : If set and non-zero, do not build"
  echo "                                    : (or run) any tests."
  echo "\${LIBCUDACXX_SKIP_TESTS_RUN}        : If set and non-zero, build tests"
  echo "                                    : but do not run them."
  echo "\${LIBCUDACXX_SKIP_LIBCXX_TESTS}     : If set and non-zero, do not build"
  echo "                                    : (or run) any libc++ tests."
  echo "\${LIBCUDACXX_SKIP_LIBCUDACXX_TESTS} : If set and non-zero, do not build"
  echo "                                    : (or run) any libcu++ tests."
  echo "\${LIBCUDACXX_COMPUTE_ARCHS}         : A space-separated list of SM"
  echo "                                    : architectures (specified as integers)"
  echo "                                    : to target. If empty, all known SM"
  echo "                                    : architectures are targeted."

  exit 1
}

SCRIPT_PATH=$(cd $(dirname ${0}); pwd -P)

LIBCUDACXX_PATH=$(realpath ${SCRIPT_PATH}/../../../../)

###############################################################################
# Command Line Processing.

LIT_PREFIX="time"

LIBCXX_BUILD_PATH=${LIBCUDACXX_PATH}/libcxx/build
LIBCUDACXX_BUILD_PATH=${LIBCUDACXX_PATH}/build/libcxx

LIBCXX_LOG_FILE=libcxx_lit.log
LIBCUDACXX_LOG_FILE=libcudacxx_lit.log

RAW_TEST_TARGETS=""

while test ${#} != 0
do
  case "${1}" in
  -h) usage ;;
  -help) usage ;;
  --help) usage ;;
  --dry-run) LIT_PREFIX="echo" ;;
  --libcxx-build-path)
    shift # The next argument is the directory.
    LIBCXX_BUILD_PATH=${1}
    ;;
  --libcudacxx-build-path)
    shift # The next argument is the directory.
    LIBCUDACXX_BUILD_PATH=${1}
    ;;
  --skip-base-tests-build) LIBCUDACXX_SKIP_BASE_TESTS_BUILD=1 ;;
  --skip-tests-runs)       LIBCUDACXX_SKIP_TESTS_RUN=1 ;;
  --skip-libcxx-tests)     LIBCUDACXX_SKIP_LIBCXX_TESTS=1 ;;
  --skip-libcudacxx-tests) LIBCUDACXX_SKIP_LIBCUDACXX_TESTS=1 ;;
  --log-libcxx-results)
    shift # The next argument is the file.
    LIBCXX_LOG_FILE=${1}
    ;;
  --log-libcudacxx-results)
    shift # The next argument is the file.
    LIBCUDACXX_LOG_FILE=${1}
    ;;
  *)
    RAW_TEST_TARGETS="${RAW_TEST_TARGETS:+${RAW_TEST_TARGETS} }${1}"
    ;;
  esac
  shift
done

touch ${LIBCXX_LOG_FILE}
touch ${LIBCUDACXX_LOG_FILE}

LIBCXX_TEST_TARGETS="libcxx/test"
LIBCUDACXX_TEST_TARGETS="test"

if [ "${RAW_TEST_TARGETS:-all}" != "all" ]
then
  LIBCXX_TEST_TARGETS=""
  LIBCUDACXX_TEST_TARGETS=""
  for test in ${RAW_TEST_TARGETS}
  do
    LIBCXX_TEST_TARGETS="${LIBCXX_TEST_TARGETS:+${LIBCXX_TEST_TARGETS} }libcxx/test/${test}"
    LIBCUDACXX_TEST_TARGETS="${LIBCUDACXX_TEST_TARGETS:+${LIBCUDACXX_TEST_TARGETS} }test/${test}"
  done
fi

###############################################################################
# Environment Variable Processing

if [ "${LIBCUDACXX_SKIP_BASE_TESTS_BUILD:-0}" != "0" ]
then
  exit 0
fi

LIT_FLAGS="-vv -a"
if [ "${LIBCUDACXX_SKIP_TESTS_RUN:-0}" != "0" ]
then
  LIT_FLAGS="${LIT_FLAGS:+${LIT_FLAGS} }-Dexecutor=\"NoopExecutor()\""
fi

if [ -n "${LIBCUDACXX_COMPUTE_ARCHS}" ]
then
  LIT_COMPUTE_ARCHS_FLAG="-Dcompute_archs=\""
  LIT_COMPUTE_ARCHS_SUFFIX="\""
fi

###############################################################################

if [ "${LIBCUDACXX_SKIP_LIBCXX_TESTS:-0}" == "0" ]
then
  TIMEFORMAT="WALLTIME libc++ : %R [sec]" \
  LIBCXX_SITE_CONFIG=${LIBCXX_BUILD_PATH}/test/lit.site.cfg \
  bash -c "${LIT_PREFIX} lit ${LIT_FLAGS} ${LIBCXX_TEST_TARGETS}" \
  2>&1 | tee ${LIBCXX_LOG_FILE}
  if [ "${PIPESTATUS[0]}" != "0" ]; then exit 1; fi
fi

if [ "${LIBCUDACXX_SKIP_LIBCUDACXX_TESTS:-0}" == "0" ]
then
  TIMEFORMAT="WALLTIME libcu++ : %R [sec]" \
  LIBCXX_SITE_CONFIG=${LIBCUDACXX_BUILD_PATH}/test/lit.site.cfg \
  bash -c "${LIT_PREFIX} lit ${LIT_FLAGS} ${LIT_COMPUTE_ARCHS_FLAG}${LIBCUDACXX_COMPUTE_ARCHS}${LIT_COMPUTE_ARCHS_SUFFIX} ${LIBCUDACXX_TEST_TARGETS}" \
  2>&1 | tee ${LIBCUDACXX_LOG_FILE}
  if [ "${PIPESTATUS[0]}" != "0" ]; then exit 1; fi
fi

###############################################################################

# If any of the lines searched for below aren't present in the log files, the
# grep commands will return nothing, and the variables will be empty. Bash
# treats empty variables as zero for the purposes of arithmetic, which is what
# we want anyways, so we don't need to do anything else.

LIBCXX_EXPECTED_PASSES=$(    egrep 'Expected Passes'     ${LIBCXX_LOG_FILE} | sed 's/  Expected Passes    : \([0-9]\+\)/\1/')
LIBCXX_EXPECTED_FAILURES=$(  egrep 'Expected Failures'   ${LIBCXX_LOG_FILE} | sed 's/  Expected Failures  : \([0-9]\+\)/\1/')
LIBCXX_UNSUPPORTED_TESTS=$(  egrep 'Unsupported Tests'   ${LIBCXX_LOG_FILE} | sed 's/  Unsupported Tests  : \([0-9]\+\)/\1/')
LIBCXX_UNEXPECTED_PASSES=$(  egrep 'Unexpected Passes'   ${LIBCXX_LOG_FILE} | sed 's/  Unexpected Passes  : \([0-9]\+\)/\1/')
LIBCXX_UNEXPECTED_FAILURES=$(egrep 'Unexpected Failures' ${LIBCXX_LOG_FILE} | sed 's/  Unexpected Failures: \([0-9]\+\)/\1/')

LIBCUDACXX_EXPECTED_PASSES=$(    egrep 'Expected Passes'     ${LIBCUDACXX_LOG_FILE} | sed 's/  Expected Passes    : \([0-9]\+\)/\1/')
LIBCUDACXX_EXPECTED_FAILURES=$(  egrep 'Expected Failures'   ${LIBCUDACXX_LOG_FILE} | sed 's/  Expected Failures  : \([0-9]\+\)/\1/')
LIBCUDACXX_UNSUPPORTED_TESTS=$(  egrep 'Unsupported Tests'   ${LIBCUDACXX_LOG_FILE} | sed 's/  Unsupported Tests  : \([0-9]\+\)/\1/')
LIBCUDACXX_UNEXPECTED_PASSES=$(  egrep 'Unexpected Passes'   ${LIBCUDACXX_LOG_FILE} | sed 's/  Unexpected Passes  : \([0-9]\+\)/\1/')
LIBCUDACXX_UNEXPECTED_FAILURES=$(egrep 'Unexpected Failures' ${LIBCUDACXX_LOG_FILE} | sed 's/  Unexpected Failures: \([0-9]\+\)/\1/')

LIBCXX_PASSES=$((LIBCXX_EXPECTED_PASSES + LIBCXX_EXPECTED_FAILURES))
LIBCXX_FAILS=$((LIBCXX_UNEXPECTED_PASSES + LIBCXX_UNEXPECTED_FAILURES))
LIBCXX_TOTAL=$((LIBCXX_PASSES + LIBCXX_FAILS))

LIBCUDACXX_PASSES=$((LIBCUDACXX_EXPECTED_PASSES + LIBCUDACXX_EXPECTED_FAILURES))
LIBCUDACXX_FAILS=$((LIBCUDACXX_UNEXPECTED_PASSES + LIBCUDACXX_UNEXPECTED_FAILURES))
LIBCUDACXX_TOTAL=$((LIBCUDACXX_PASSES + LIBCUDACXX_FAILS))

OVERALL_PASSES=$((LIBCXX_PASSES + LIBCUDACXX_PASSES))
OVERALL_FAILS=$((LIBCXX_FAILS + LIBCUDACXX_FAILS))
OVERALL_TOTAL=$((LIBCXX_TOTAL + LIBCUDACXX_TOTAL))

printf "Score: %.2f%%\n" "$((10000 * ${OVERALL_PASSES} / ${OVERALL_TOTAL}))e-2"

