#! /bin/bash

function usage {
  echo "Usage: $0 [flags...] tests"
  echo 
  echo "Run the libc++ and libcu++ test suites."
  echo
  echo "-h, -help, --help             : Print this message."
  echo "--dry-run                     : Show what commands would be invoked;"
  echo "                              : don't actually execute anything."
  echo "--libcxx-build-path <dir>     : Use libc++ configuration generated by"
  echo "                              : by CMake from <dir>."
  echo "--libcudacxx-build-path <dir> : Use libc++ configuration generated by"
  echo "                              : by CMake from <dir>."
  echo "--skip-base-tests-build       : Do not build (or run) any tests."
  echo "                              : Overrides \${LIBCUDACXX_SKIP_BASE_TESTS_BUILD}."
  echo "--skip-tests-runs             : Build tests but do not run them."
  echo "                              : Overrides \${LIBCUDACXX_SKIP_TESTS_RUN}."
  echo "--skip-libcxx-tests           : Do not build (or run) any libc++ tests."
  echo "                              : Overrides \${LIBCUDACXX_SKIP_LIBCXX_TESTS}."
  echo "--skip-libcudacxx-tests       : Do not build (or run) any libcu++ tests."
  echo "                              : Overrides \${LIBCUDACXX_SKIP_LIBCUDACXX_TESTS}."
  echo
  echo "\${LIBCUDACXX_SKIP_BASE_TESTS_BUILD} : If set and non-zero, do not build"
  echo "                                    : (or run) any tests."
  echo "\${LIBCUDACXX_SKIP_TESTS_RUN}        : If set and non-zero, build tests"
  echo "                                    : but do not run them."
  echo "\${LIBCUDACXX_SKIP_LIBCXX_TESTS}     : If set and non-zero, do not build"
  echo "                                    : (or run) any libc++ tests."
  echo "\${LIBCUDACXX_SKIP_LIBCUDACXX_TESTS} : If set and non-zero, do not build"
  echo "                                    : (or run) any libcu++ tests."
  echo "\${LIBCUDACXX_COMPUTE_ARCHS}         : A space-separated list of SM"
  echo "                                    : architectures (specified as integers)"
  echo "                                    : to target. If empty, all known SM"
  echo "                                    : architectures are targeted."
  exit 1
}

SCRIPT_PATH=$(cd $(dirname ${0}); pwd -P)

LIBCUDACXX_PATH=$(realpath ${SCRIPT_PATH}/../../../../)

###############################################################################
# Command Line Processing.

LIBCXX_BUILD_PATH=${LIBCUDACXX_PATH}/libcxx/build
LIBCUDACXX_BUILD_PATH=${LIBCUDACXX_PATH}/build/libcxx

TIMEFORMAT="%R [sec]"
LIT_PREFIX="time"

while test $# != 0
do
  case "${1}" in
  -h) usage ;;
  -help) usage ;;
  --help) usage ;;
  --dry-run)
    LIT_PREFIX="echo"
    ;;
  --libcxx-build-path)
    shift # The next argument is the directory.
    LIBCXX_BUILD_PATH=${1}
    ;;
  --libcudacxx-build-path)
    shift # The next argument is the directory.
    LIBCUDACXX_BUILD_PATH=${1}
    ;;
  --skip-base-tests-build) LIBCUDACXX_SKIP_BASE_TESTS_BUILD=1 ;;
  --skip-tests-runs)       LIBCUDACXX_SKIP_TESTS_RUN=1 ;;
  --skip-libcxx-tests)     LIBCUDACXX_SKIP_LIBCXX_TESTS=1 ;;
  --skip-libcudacxx-tests) LIBCUDACXX_SKIP_LIBCUDACXX_TESTS=1 ;;
  *) usage ;;
  esac
  shift
done

###############################################################################
# Environment Variable Processing

if [ "${LIBCUDACXX_SKIP_BASE_TESTS_BUILD:-0}" != "0" ]
then
  exit 0
fi

LIT_FLAGS="-vv -a"
if [ "${LIBCUDACXX_SKIP_TESTS_RUN:-0}" != "0" ]
then
  LIT_FLAGS="${LIT_FLAGS:+${LIT_FLAGS} }-Dexecutor=\"NoopExecutor()\""
fi

if [ -n "${LIBCUDACXX_COMPUTE_ARCHS}" ]
then
  LIT_COMPUTE_ARCHS_FLAG="-Dcompute_archs="
fi

###############################################################################

if [ "${LIBCUDACXX_SKIP_LIBCXX_TESTS:-0}" == "0" ]
then
  export LIBCXX_SITE_CONFIG=${LIBCXX_BUILD_PATH}/test/lit.site.cfg
  bash -c "${LIT_PREFIX} lit ${LIT_FLAGS} libcxx/test"

  if [ "$?" != "0" ]; then exit 1; fi
fi

if [ "${LIBCUDACXX_SKIP_LIBCUDACXX_TESTS:-0}" == "0" ]
then
  export LIBCXX_SITE_CONFIG=${LIBCUDACXX_BUILD_PATH}/test/lit.site.cfg
  bash -c "${LIT_PREFIX} lit ${LIT_FLAGS} ${LIT_COMPUTE_ARCHS_FLAG}\"${LIBCUDACXX_COMPUTE_ARCHS}\" test"

  if [ "$?" != "0" ]; then exit 1; fi
fi

